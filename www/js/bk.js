// プロフィールコントローラーmodule.controller('profileCtrl', function($scope, $http, $q, $controller) {    // 基本コントローラーを継承    $controller('baseCtrl', {$scope: $scope});     // document.readyの実装    angular.element(document).ready(function () {        var options = $scope.indexNavigator.getCurrentPage().options;            // オプションでプロフィールが渡ってきたら        if (!angular.isUndefined(options.people)) {            $scope.people.peopleID     = options.people.peopleID;            $scope.people._id          = options.people._id;            $scope.people.mail         = options.people.mail;            $scope.people.password     = options.people.password;            $scope.people.nicname      = options.people.nicname;            $scope.people.auth         = options.people.auth;            $scope.people.token        = options.people.token;            $scope.people.loging       = options.people.loging;            $scope.people.updated      = options.people.updated;            $scope.people.created      = options.people.created;            $scope.people.boards       = options.people.boards;            $scope.$apply();        }       });        });// コントローラーmodule.controller('loginCtrl', function($scope,$http, $controller) {    });// コントローラーmodule.controller('signCtrl', function($scope,$http, $controller) {        // 基本コントローラーを継承    $controller('baseCtrl', {$scope: $scope});    // document.readyの実装    angular.element(document).ready(function () {            });       });// コントローラーmodule.controller('sss', function($scope, $http, $q, $controller, socket) {        // document.readyの実装    angular.element(document).ready(function () {        // ピープル情報を取得        var options = $scope.indexNavigator.getCurrentPage().options;            // オプションでプロフィールが渡ってきたら        if (!angular.isUndefined(options.people)) {            $scope.people.peopleID     = options.people.peopleID;            $scope.people._id          = options.people._id;            $scope.people.mail         = options.people.mail;            $scope.people.password     = options.people.password;            $scope.people.nicname      = options.people.nicname;            $scope.people.auth         = options.people.auth;            $scope.people.token        = options.people.token;            $scope.people.loging       = options.people.loging;            $scope.people.updated      = options.people.updated;            $scope.people.created      = options.people.created;            $scope.people.boards       = options.people.boards;            $scope.$apply();        }                   $scope.initRoom();    });    $scope.rooms = [];    $scope.status = {        signin : false    };    $scope.initRoom = function () {        $http({            method: 'GET',            url : $scope.webAPI.URL + $scope.webAPI.room + $scope.webAPI.list + "/?peopleID=" + $scope.people.peopleID,            headers: { 'Content-Type': 'application/json' },            data: null,        }).success(function(data, status, headers, config) {            $scope.rooms = data.data;                        // DB登録                        // 画面表示            console.log($scope.rooms);                    }).error(function(data, status, headers, config) {            // 登録済みのエラー            $scope.alert("トーク一覧取得エラー", true);            // モーダル非表示            modal.hide();        });    };        $scope.startTalk = function(roomID){                // Roomへサインイン        socket.emit('signin',{            roomID : roomID,            peopleID: $scope.people.peopleID         });                        };       //                   socket.on('newPeople',function(text){        // ログインしたら部屋へ移動        tabbar.loadPage("talk.html");            });    socket.on('newMsg',function(text){        console.log(text);     });    });// コントローラーmodule.controller('boardCtrl', function($scope, $http, $q, $controller) {        // 基本コントローラーを継承    $controller('baseCtrl', {$scope: $scope});        $scope.boardMsg = {        peopleID    : "",        nicname     : "",        imageURL    : "",        toBoardID   : "",        toPeopleID  : "",        toNicname   : "",        inline      : "",        desc        : ""    };            // document.readyの実装    angular.element(document).ready(function () {        // ピープル情報を取得        $scope.getPeople();        var options = $scope.indexNavigator.getCurrentPage().options;            //console.log(options);        console.log()        // オプションでプロフィールが渡ってきたら        if (!angular.isUndefined(options.item)) {            //console.log(options.item);            $scope.boardMsg.toBoardID      = options.item.boardID;            $scope.boardMsg.toPeopleID     = options.item.peopleID;            $scope.boardMsg.toNicname      = options.item.nicname;            $scope.boardMsg.inline         = options.item.desc;            $scope.$apply();        }        // ピープル情報        if (!angular.isUndefined(options.people)) {            $scope.boardMsg.peopleID       = options.people.peopleID;            $scope.boardMsg.nicname        = options.people.nicname;            $scope.boardMsg.imageURL       = options.people.imageURL;            $scope.$apply();        }    });    $scope.saveBoardMsg = function(newMsg) {                var msg = {            peopleID : newMsg.peopleID,            desc : newMsg.desc        };               console.log(msg);        $http({            method: 'POST',            url : $scope.webAPI.URL + $scope.webAPI.board,            headers: { 'Content-Type': 'application/json' },            data: msg,        }).success(function(data, status, headers, config) {//            // メインへ遷移//            $scope.options.people = $scope.people;                            $scope.movePage($scope.page.top, $scope.people);            //  indexNavigator.pushPage('board.html');                                  }).error(function(data, status, headers, config) {            // 登録済みのエラー            $scope.alert("コメント送信エラー", true);            // モーダル非表示            modal.hide();        });                                            };    // 新規投稿画面へ遷移    $scope.pushMsgPage = function(item) {        $scope.options.item = item;        $scope.options.people = $scope.people;        console.log($scope.people);        $scope.movePage($scope.page.message, $scope.options);            };    $scope.boardCount = 100;    $scope.boardItemHeight = 150;    $scope.listDelegate = {        configureItemScope: function(index, itemScope) {            if (!itemScope.item) {                console.log("Created item #" + index);                itemScope.canceler = $q.defer();                itemScope.item = {                    boardID  : 'Item #' + (index + 1),                    peopleID : 'Item #' + (index + 1),                    nicname  : '',                    label    : '',                    desc     : '',                    to       : '',                    pref     : '',                    sex      : '',                    age      : '',                    loging   : '',                    created  : '',                    updated  : '',                };                $http.get($scope.webAPI.URL + $scope.webAPI.board + $scope.webAPI.list + "/?limit=1&offset=" + index, {                    timeout: itemScope.canceler.promise                }).success(function(data) {                    var board = data.data[0];                    //console.log(board);                    if (data.data.length > 0) {                        itemScope.item.boardID = board.boardID;                        itemScope.item.peopleID= board.peopleID;                        itemScope.item.imageURL= board.imageURL;                        itemScope.item.nicname = board.people.nicname;                        itemScope.item.desc    = board.desc;                        itemScope.item.pref    = board.people.pref;                        itemScope.item.sex     = board.people.sex;                        itemScope.item.birthDay= board.people.birthDay;                        itemScope.item.loging  = board.people.loging;                        itemScope.item.created = board.created;                        itemScope.item.updated = board.updated;                                        }  else {                        $scope.boardCount = index;                    }                }).error(function() {                    console.log("e");                    itemScope.item.desc = 'No bacon lorem ipsum';                    itemScope.item.label = 'No bacon'                });            }        },        calculateItemHeight: function(index) {            return $scope.boardItemHeight;        },        countItems: function() {            return $scope.boardCount;        },        destroyItemScope: function(index, itemScope) {            itemScope.canceler.resolve();            console.log("Destroyed item #" + index);        }    };    	});// コントローラーmodule.controller('talkCtrl', function($scope, $http, $q, $controller, socket) {    // 基本コントローラーを継承    $controller('baseCtrl', {$scope: $scope});    // document.readyの実装    angular.element(document).ready(function () {        var options = $scope.indexNavigator.getCurrentPage().options;            // オプションでプロフィールが渡ってきたら        if (!angular.isUndefined(options.people)) {            $scope.people.peopleID     = options.people.peopleID;            $scope.people._id          = options.people._id;            $scope.people.mail         = options.people.mail;            $scope.people.password     = options.people.password;            $scope.people.nicname      = options.people.nicname;            $scope.people.auth         = options.people.auth;            $scope.people.token        = options.people.token;            $scope.people.loging       = options.people.loging;            $scope.people.updated      = options.people.updated;            $scope.people.created      = options.people.created;            $scope.people.boards       = options.people.boards;            $scope.$apply();        }        console.log($scope.people.peopleID);                                $scope.initTalk($scope.people.peopleID);                            });//    // ソケット通信テスト//    $scope.soketTest = function() {//        //接続//        var socket = io.connect($scope.socketURL);//        socket.on('connect', function() {//            console.log('connect!');//        });//        // サーバーからのテキストを受けてコンソールに表示//        socket.on('text',function(text){//            console.log(text); // 'socket.io OK!!'がコンソールに表示される//        });//    };//    socket.on('connect', function (data) {//        console.log('connect!');//    });    socket.on('text',function(text){        console.log(text); // 'socket.io OK!!'がコンソールに表示される    });	socket.on('socketerror',function(text){        console.log(text); // 'socket.io OK!!'がコンソールに表示される    });	socket.on('newMsg',function(text){        console.log(text); // 'socket.io OK!!'がコンソールに表示される    });    socket.on('newMessage',function(text){        console.log(text); // 'socket.io OK!!'がコンソールに表示される    });    socket.on('newPeople',function(text){        console.log(text); // 'socket.io OK!!'がコンソールに表示される    });    $scope.initTalk= function (peopleID) {                $http({            method: 'GET',            url : $scope.webAPI.URL + $scope.webAPI.room + $scope.webAPI.list + "/?peopleID=" + "110",            headers: { 'Content-Type': 'application/json' },            data: null,        }).success(function(data, status, headers, config) {                               }).error(function(data, status, headers, config) {            // 登録済みのエラー            $scope.alert("トーク一覧取得エラー", true);            // モーダル非表示            modal.hide();        });            };    //$scope.msg = "";    $scope.sendMsgggg = function () {                socket.emit('signin',{                    name : "",                    avatar : "http://file.local-c.com/uploads/lcchat/logo40.png",                    roomID : "1",                    peopleID: "101"                 });                // 2/spika,["sendMessage",{"message":"ggg","roomID":"1","userID":"1","type":1,"localID":"_k2QVjyKAPD1zmnA6Mwcm9PsJxTuSsKLs"}]        //socket.emit('hoge',$scope.msg);        // Emit data to server//        socket.emit('sendMessage',{//            message: $scope.msg,//            roomID: 1,//            userID: 1,//            type:1,//            localID: "_k2QVjyKAPD1zmnA6Mwcm9PsJxTuSsKLs"//        });//		socket.emit('sendMsg',{//            message: $scope.msg,//            roomID: 1,//            peopleID: 101,//            type:1,//            localID: 'sfdfd'//        });        //        $scope.talkList.push({//            imageURL : "http://file.local-c.com/uploads/lcchat/logo40.png",//            msg      : $scope.msg,//            self     : 0,//        });    },    $scope.talkList = [        {                        peopleID : "1",            people   : {imageURL : "http://file.local-c.com/uploads/lcchat/logo40.png"},            msg      : "ほげほげ"        },        {            peopleID : "2",            people   : {imageURL : "http://file.local-c.com/uploads/mimicry/noimage.png"},            msg      : "ほげほげ"        }    ];    });// コントローラーmodule.controller('MyCtrl', function($scope, $http, $q, $controller) {    $scope.MyDelegate = {      configureItemScope: function(index, itemScope) {        if (!itemScope.item) {          console.log("Created item #" + index);          itemScope.canceler = $q.defer();          itemScope.item = {            title: 'Item #' + (index + 1),            label: '',            desc: '',            rand: Math.random()          };          $http.get('https://baconipsum.com/api/?type=meat-and-filler&sentences=1', {            timeout: itemScope.canceler.promise          }).success(function(data) {            console.log("success" + data[0]);            itemScope.item.desc = data[0];            itemScope.item.label = itemScope.item.desc.substr(0, itemScope.item.desc.indexOf(" ")) + 'bacon'          }).error(function() {            itemScope.item.desc = 'No bacon lorem ipsum';            itemScope.item.label = 'No bacon'          });        }      },      calculateItemHeight: function(index) {        return 91;      },      countItems: function() {        return 10000000;      },      destroyItemScope: function(index, itemScope) {        itemScope.canceler.resolve();        console.log("Destroyed item #" + index);      }    };});